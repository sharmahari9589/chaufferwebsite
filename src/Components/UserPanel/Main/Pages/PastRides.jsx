import React, { useEffect, useState } from "react";
import axios from "axios";
import Cookies from "js-cookie";
import { Col, Container, Row } from "react-bootstrap";

import style from "./UpComing.module.css";
import { useNavigate } from "react-router-dom";
import { BaseUrl } from "../../../../Env";

const PastRide = () => {
  const token = Cookies.get("token");
  const [upcomingRides, setUpcomingRides] = useState([]);

  const navigate = useNavigate();

  async function getUpcomingRides() {
    try {
      const response = await axios.get(`${BaseUrl}/get-past-bookings`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setUpcomingRides(response.data.data);
      console.log(response.data.data);
    } catch (error) {
      console.log(error.response);
    }
  }

  useEffect(() => {
    getUpcomingRides();
  }, []);

  const HandleNavigate = (id) => {
    navigate(`/user/pastride/${id}`);
  };

  return (
    <>
      <Container>
        <Row className={style.UpcomingRidesHeading}>
          <h2>Past Rides</h2>
        </Row>
        <Row style={{ justifyContent: "center", gap: "20px" }}>
          {upcomingRides.map((item) => (
            <>
              {item?.bookingMode == "distance" ? (
                <Col lg={10}>
                  <>
                    <div
                      className={style.BookingDetailsMain}
                      onClick={() => HandleNavigate(item?._id)}
                    >
                      <div style={{ display: "flex" }}>
                        <div>
                          <svg
                            width={100}
                            height={100}
                            viewBox="0 0 1000 1000"
                            id="Layer_2"
                            version="1.1"
                            fill="#0bc36b"
                            stroke="#0bc36b"
                          >
                            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                            <g
                              id="SVGRepo_tracerCarrier"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            ></g>
                            <g id="SVGRepo_iconCarrier">
                              <path
                                d="M162.805,639.462v47.722c0,16.109,13.067,29.177,29.187,29.177h35.443 c16.11,0,29.177-13.068,29.177-29.177V672.5l-20.162,0.03C207.899,672.53,181.249,660.251,162.805,639.462z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                              <path
                                d="M763.699,671.681l-20.314,0.03v15.473c0,16.109,13.068,29.177,29.188,29.177h35.443 c16.11,0,29.177-13.068,29.177-29.177v-48.561C818.779,659.371,792.199,671.641,763.699,671.681z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                              <path
                                d="M160.372,604.276l4.453,8.274c14.205,26.398,41.779,42.843,71.756,42.795l246.993-0.394 l280.098-0.447c29.969-0.048,57.485-16.572,71.609-43.004l4.443-8.314c7.679-14.371,10.05-30.983,6.718-46.933 c-1.302-6.233-2.753-13.016-4.222-19.575c-6.609-29.518-24.23-55.402-49.257-72.389l-52.506-35.64 c-10.507-7.132-20.397-15.078-29.593-23.741l16.595-4.104c14.011-3.464,23.853-16.036,23.853-30.468v0 c0-11.751-11.027-20.383-22.435-17.563l-19.741,4.881c-10.787,2.667-19.097,10.735-22.353,20.893 c-5.358-6.827-10.36-13.947-14.961-21.349l-25.521-41.058c-12.584-20.245-34.744-32.54-58.581-32.502l-71.584,0.115l-104.685,0.167 c-23.831,0.038-45.947,12.397-58.468,32.673l-25.427,41.177c-4.427,7.169-9.223,14.082-14.361,20.715 c-3.27-10.128-11.568-18.169-22.332-20.831l-19.741-4.881c-11.407-2.82-22.435,5.813-22.435,17.563v0 c0,14.432,9.842,27.004,23.853,30.468l16.777,4.148c-9.351,8.93-19.426,17.117-30.157,24.449l-52.446,35.835 c-24.967,17.06-42.505,42.987-49.028,72.515c-1.451,6.57-2.884,13.364-4.17,19.607C150.231,573.318,152.65,589.926,160.372,604.276z M699.491,519.756c15.996-21.89,65.657-27.648,81.794-28.96c3.148-0.256,6.118,1.468,7.451,4.331 c4.196,9.008,12.108,29.084,6.766,42.821c-5.944,15.284-77.518,24.861-100.247,27.532c-4.215,0.495-8.035-2.569-8.407-6.796 C686.125,550.483,687.383,536.325,699.491,519.756z M694.574,599.38h23.485c4.744,0,8.591,3.846,8.591,8.591 c0,4.744-3.846,8.59-8.591,8.59h-23.485c-4.744,0-8.59-3.846-8.59-8.59C685.984,603.226,689.83,599.38,694.574,599.38z M358.848,552.506c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485c0-4.745,3.846-8.591,8.591-8.591 c4.744,0,8.59,3.846,8.59,8.591V552.506z M401.631,558.762c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.486 c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.59,3.846,8.59,8.59V558.762z M444.415,565.019c0,4.744-3.846,8.59-8.591,8.59 c-4.745,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.591,3.846,8.591,8.59V565.019z M487.198,577.531 c0,4.745-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485c0-4.744,3.846-8.59,8.591-8.59 c4.744,0,8.59,3.846,8.59,8.59V577.531z M529.982,577.531c0,4.745-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485 c0-4.744,3.846-8.59,8.591-8.59c4.744,0,8.59,3.846,8.59,8.59V577.531z M572.766,565.019c0,4.744-3.846,8.59-8.59,8.59 c-4.745,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.59,3.846,8.59,8.59V565.019z M615.55,558.762 c0,4.744-3.846,8.59-8.591,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59 c4.744,0,8.591,3.846,8.591,8.59V558.762z M658.333,552.506c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.485 c0-4.745,3.846-8.591,8.59-8.591c4.744,0,8.59,3.846,8.59,8.591V552.506z M334.698,391.976c5.092-6.71,9.883-13.687,14.356-20.931 l25.427-41.176c7.982-12.926,21.818-20.658,37.011-20.683l176.269-0.281c15.238,0,29.074,7.691,37.082,20.574l25.521,41.057 c4.615,7.425,9.566,14.568,14.832,21.428c3.221,4.196,0.933,10.289-4.256,11.314c-48.217,9.535-102.936,14.921-160.941,14.921 c-58.038,0-112.786-5.392-161.024-14.937C333.803,402.239,331.51,396.177,334.698,391.976z M305.426,616.561H281.94 c-4.744,0-8.59-3.846-8.59-8.59c0-4.745,3.846-8.591,8.59-8.591h23.485c4.744,0,8.591,3.846,8.591,8.591 C314.016,612.715,310.17,616.561,305.426,616.561z M211.264,495.126c1.333-2.863,4.303-4.587,7.451-4.331 c16.136,1.313,65.798,7.071,81.794,28.96c12.108,16.569,13.367,30.727,12.644,38.927c-0.372,4.227-4.193,7.292-8.408,6.796 c-22.729-2.671-94.303-12.248-100.247-27.532C199.156,524.211,207.069,504.135,211.264,495.126z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                            </g>
                          </svg>
                        </div>

                        <div className={style.BookingDetailsTextMain}>
                          <h4 style={{ textTransform: "uppercase" }}>
                            {item?.fullName}
                          </h4>

                          <div className={style.BookingDetailsDateAndTimeMain}>
                            <TimeComponent item={item} />
                            <p>$&nbsp;{item?.finalPrice.toFixed(2)}</p>
                          </div>
                        </div>
                      </div>

                      {/*  */}
                      <div className={style.bookingPaybtn}>
                        <div className={style.BookingModeMain}>
                          <h1>
                            Booking Mode:&nbsp;
                            {item?.bookingMode.toUpperCase()}
                          </h1>
                        </div>
                        {/* {item?.isAlloted == true && (
                          <button
                            style={{ borderRadius: "10px", width: "100px" }}
                            onClick={(e) => {
                              e.stopPropagation();
                            }}
                          >
                            <Link
                              style={{ textDecoration: "none", color: "#fff" }}
                              to={`${item?.paymentUrl}`}
                            >
                              Pay now
                            </Link>
                          </button>
                        )} */}
                      </div>
                    </div>
                  </>
                </Col>
              ) : (
                <Col lg={10}>
                  <>
                    <div
                      className={style.BookingDetailsMain}
                      onClick={() => HandleNavigate(item?._id)}
                    >
                      <div style={{ display: "flex" }}>
                        <div>
                          <svg
                            width={100}
                            height={100}
                            viewBox="0 0 1000 1000"
                            id="Layer_2"
                            version="1.1"
                            fill="#0bc36b"
                            stroke="#0bc36b"
                          >
                            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                            <g
                              id="SVGRepo_tracerCarrier"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                            ></g>
                            <g id="SVGRepo_iconCarrier">
                              <path
                                d="M162.805,639.462v47.722c0,16.109,13.067,29.177,29.187,29.177h35.443 c16.11,0,29.177-13.068,29.177-29.177V672.5l-20.162,0.03C207.899,672.53,181.249,660.251,162.805,639.462z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                              <path
                                d="M763.699,671.681l-20.314,0.03v15.473c0,16.109,13.068,29.177,29.188,29.177h35.443 c16.11,0,29.177-13.068,29.177-29.177v-48.561C818.779,659.371,792.199,671.641,763.699,671.681z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                              <path
                                d="M160.372,604.276l4.453,8.274c14.205,26.398,41.779,42.843,71.756,42.795l246.993-0.394 l280.098-0.447c29.969-0.048,57.485-16.572,71.609-43.004l4.443-8.314c7.679-14.371,10.05-30.983,6.718-46.933 c-1.302-6.233-2.753-13.016-4.222-19.575c-6.609-29.518-24.23-55.402-49.257-72.389l-52.506-35.64 c-10.507-7.132-20.397-15.078-29.593-23.741l16.595-4.104c14.011-3.464,23.853-16.036,23.853-30.468v0 c0-11.751-11.027-20.383-22.435-17.563l-19.741,4.881c-10.787,2.667-19.097,10.735-22.353,20.893 c-5.358-6.827-10.36-13.947-14.961-21.349l-25.521-41.058c-12.584-20.245-34.744-32.54-58.581-32.502l-71.584,0.115l-104.685,0.167 c-23.831,0.038-45.947,12.397-58.468,32.673l-25.427,41.177c-4.427,7.169-9.223,14.082-14.361,20.715 c-3.27-10.128-11.568-18.169-22.332-20.831l-19.741-4.881c-11.407-2.82-22.435,5.813-22.435,17.563v0 c0,14.432,9.842,27.004,23.853,30.468l16.777,4.148c-9.351,8.93-19.426,17.117-30.157,24.449l-52.446,35.835 c-24.967,17.06-42.505,42.987-49.028,72.515c-1.451,6.57-2.884,13.364-4.17,19.607C150.231,573.318,152.65,589.926,160.372,604.276z M699.491,519.756c15.996-21.89,65.657-27.648,81.794-28.96c3.148-0.256,6.118,1.468,7.451,4.331 c4.196,9.008,12.108,29.084,6.766,42.821c-5.944,15.284-77.518,24.861-100.247,27.532c-4.215,0.495-8.035-2.569-8.407-6.796 C686.125,550.483,687.383,536.325,699.491,519.756z M694.574,599.38h23.485c4.744,0,8.591,3.846,8.591,8.591 c0,4.744-3.846,8.59-8.591,8.59h-23.485c-4.744,0-8.59-3.846-8.59-8.59C685.984,603.226,689.83,599.38,694.574,599.38z M358.848,552.506c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485c0-4.745,3.846-8.591,8.591-8.591 c4.744,0,8.59,3.846,8.59,8.591V552.506z M401.631,558.762c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.486 c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.59,3.846,8.59,8.59V558.762z M444.415,565.019c0,4.744-3.846,8.59-8.591,8.59 c-4.745,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.591,3.846,8.591,8.59V565.019z M487.198,577.531 c0,4.745-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485c0-4.744,3.846-8.59,8.591-8.59 c4.744,0,8.59,3.846,8.59,8.59V577.531z M529.982,577.531c0,4.745-3.846,8.59-8.59,8.59c-4.744,0-8.591-3.846-8.591-8.59v-23.485 c0-4.744,3.846-8.59,8.591-8.59c4.744,0,8.59,3.846,8.59,8.59V577.531z M572.766,565.019c0,4.744-3.846,8.59-8.59,8.59 c-4.745,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59c4.744,0,8.59,3.846,8.59,8.59V565.019z M615.55,558.762 c0,4.744-3.846,8.59-8.591,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.486c0-4.744,3.846-8.59,8.59-8.59 c4.744,0,8.591,3.846,8.591,8.59V558.762z M658.333,552.506c0,4.744-3.846,8.59-8.59,8.59c-4.744,0-8.59-3.846-8.59-8.59v-23.485 c0-4.745,3.846-8.591,8.59-8.591c4.744,0,8.59,3.846,8.59,8.591V552.506z M334.698,391.976c5.092-6.71,9.883-13.687,14.356-20.931 l25.427-41.176c7.982-12.926,21.818-20.658,37.011-20.683l176.269-0.281c15.238,0,29.074,7.691,37.082,20.574l25.521,41.057 c4.615,7.425,9.566,14.568,14.832,21.428c3.221,4.196,0.933,10.289-4.256,11.314c-48.217,9.535-102.936,14.921-160.941,14.921 c-58.038,0-112.786-5.392-161.024-14.937C333.803,402.239,331.51,396.177,334.698,391.976z M305.426,616.561H281.94 c-4.744,0-8.59-3.846-8.59-8.59c0-4.745,3.846-8.591,8.59-8.591h23.485c4.744,0,8.591,3.846,8.591,8.591 C314.016,612.715,310.17,616.561,305.426,616.561z M211.264,495.126c1.333-2.863,4.303-4.587,7.451-4.331 c16.136,1.313,65.798,7.071,81.794,28.96c12.108,16.569,13.367,30.727,12.644,38.927c-0.372,4.227-4.193,7.292-8.408,6.796 c-22.729-2.671-94.303-12.248-100.247-27.532C199.156,524.211,207.069,504.135,211.264,495.126z"
                                style={{ fill: "##0bc36b" }}
                              ></path>
                            </g>
                          </svg>
                        </div>

                        <div className={style.BookingDetailsTextMain}>
                          <h4 style={{ textTransform: "uppercase" }}>
                            {item?.fullName}
                          </h4>

                          <div className={style.BookingDetailsDateAndTimeMain}>
                            <TimeComponent item={item} />
                            <p>$&nbsp;{item?.finalPrice.toFixed(2)}</p>
                          </div>
                        </div>
                      </div>

                      {/*  */}
                      <div className={style.bookingPaybtn}>
                        <div className={style.BookingModeMain}>
                          <h1>
                            Booking Mode:&nbsp;
                            {item?.bookingMode.toUpperCase()}
                          </h1>
                        </div>
                      </div>
                    </div>
                  </>
                </Col>
              )}
            </>
          ))}
        </Row>
      </Container>
    </>
  );
};
const TimeComponent = ({ item }) => {
  const dateObject = new Date(item.startTime);
  const date = item.startDate.split("T")[0];

  const indiaOffset = 5.5 * 60 * 60 * 1000; // India is UTC+5:30

  // Calculate the time in Indian Standard Time (IST)
  const indianTime = new Date(dateObject.getTime() - indiaOffset);

  // Get the components of the Indian time
  let indianHours = indianTime.getHours();
  const indianMinutes = String(indianTime.getMinutes()).padStart(2, "0");
  const ampm = indianHours >= 12 ? "pm" : "am";
  indianHours = indianHours % 12 || 12; // Convert 24-hour to 12-hour format

  // Format the Indian time as a string in the desired format
  const formattedTime = `${indianHours}:${indianMinutes}${ampm}`;

  return (
    <h5>
      {date}&nbsp;{formattedTime}
    </h5>
  );
};

export default PastRide;
